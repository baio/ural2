// Generated by CoffeeScript 1.6.2
(function() {
  define(["ural/modules/pubSub"], function(pubSub) {
    var Router;

    Router = (function() {
      function Router(controllerDirectory) {
        var _this = this;

        this.controllerDirectory = controllerDirectory;
        this._controllers = [];
        pubSub.sub("href", "change", function(data) {
          return _this._hash(data.href);
        });
      }

      Router.StartRouting = function(controllerDirectory, routes) {
        var router;

        router = new Router(controllerDirectory);
        return router.startRouting(routes);
      };

      Router.prototype.startRouting = function(routes) {
        var route, _i, _len,
          _this = this;

        for (_i = 0, _len = routes.length; _i < _len; _i++) {
          route = routes[_i];
          this.addRoute(route.url, function(controller, action, index) {
            var defaultRoute;

            if (!controller) {
              defaultRoute = routes.filter(function(f) {
                return f.url === "/";
              })[0];
              if (defaultRoute) {
                controller = defaultRoute.path.controller;
                action = defaultRoute.path.action;
                index = defaultRoute.path.arg;
              }
            }
            if (controller) {
              return _this.onRoute(controller, action, index, function() {
                return pubSub.pub("href", "changed", {
                  controller: controller,
                  action: action,
                  index: index
                });
              });
            }
          });
        }
        return this.beginRouting();
      };

      Router.prototype._hash = function(val, silent) {
        var hash;

        if (val === void 0) {
          return window.history.state;
        } else if (val) {
          val = val.replace(/^(\/)/, "");
          hash = "/" + val;
          if (!silent) {
            window.history.pushState(val, val, hash);
            return crossroads.parse(val);
          } else {
            return window.history.replaceState(val, val, hash);
          }
        }
      };

      Router.prototype.removeRoute = function(route) {
        return crossroads.removeRoute(route);
      };

      Router.prototype.addRoute = function(route, callback) {
        return crossroads.addRoute(route, callback);
      };

      Router.prototype.onRoute = function(controller, action, index, callback) {
        var controllerName, ctl, e,
          _this = this;

        controllerName = "" + controller + "Controller";
        ctl = this._controllers[controllerName];
        try {
          if (index) {
            index = JSON.parse(index);
          }
        } catch (_error) {
          e = _error;
        }
        this.onSwitchLoadingView();
        if (!ctl) {
          return require(["" + this.controllerDirectory + "/" + controllerName], function(controllerModule) {
            ctl = eval("new controllerModule.Controller()");
            ctl[action](index);
            _this._controllers[controllerName] = ctl;
            if (callback) {
              return callback();
            }
          });
        } else {
          ctl[action](index);
          if (callback) {
            return callback();
          }
        }
      };

      Router.prototype.onSwitchLoadingView = function() {
        $("#layout_loading").show();
        return $("#layout_content").hide();
      };

      Router.prototype.beginRouting = function() {
        var hash, match,
          _this = this;

        crossroads.bypassed.add(function() {
          return console.log("Not found");
        });
        hash = window.location.pathname;
        if (window.location.search) {
          match = /^[&|?]+hash=([^&^\s]+)/.exec(window.location.search);
          if (match) {
            hash = match[1];
          }
        }
        this._hash(hash);
        return window.onpopstate = function(e) {
          if (e.state !== null) {
            console.log("onpopstate", e);
            return crossroads.parse(e.state);
          }
        };
      };

      return Router;

    })();
    return {
      Router: Router
    };
  });

}).call(this);

/*
//@ sourceMappingURL=router.map
*/
