// Generated by CoffeeScript 1.6.2
(function() {
  var __hasProp = {}.hasOwnProperty;

  define(function() {
    var gOpts, _filterFields, _filterParams, _updateAutocompleteFields;

    gOpts = {
      baseUrl: null,
      data: {
        term: "Trem"
      },
      fields: {
        label: function(d) {
          if (d.FullName) {
            return d.FullName;
          } else {
            return d.Name;
          }
        },
        value: "Name",
        key: "Id"
      }
    };
    _updateAutocompleteFields = function(viewModel, fields, item, isResetOnNull) {
      var field, _results;

      _results = [];
      for (field in fields) {
        if (!__hasProp.call(fields, field)) continue;
        if (item && item.data) {
          _results.push(viewModel[fields[field]](item.data[field]));
        } else if (isResetOnNull) {
          _results.push(viewModel[fields[field]](null));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };
    _filterFields = function(viewModel, fields) {
      var data, field;

      data = {};
      for (field in fields) {
        if (!__hasProp.call(fields, field)) continue;
        data[field] = viewModel[fields[field]]();
      }
      return data;
    };
    _filterParams = function(filterParams) {
      var data, field, prm;

      data = {};
      for (field in filterParams) {
        if (!__hasProp.call(filterParams, field)) continue;
        prm = filterParams[field];
        if ($.isFunction(prm)) {
          prm = prm();
        }
        data[field] = prm;
      }
      return data;
    };
    ko.bindingHandlers.autocomplete = {
      init: function(element, valueAccessor, allBindingsAccessor, viewModel) {
        var gopts, opts;

        gopts = gOpts;
        opts = allBindingsAccessor().autocompleteOpts;
        if (opts.allowNotInList === void 0) {
          opts.allowNotInList = true;
        }
        gopts = $.extend(gopts, opts);
        return $(element).autocomplete({
          source: function(request, response) {
            var data;

            data = {};
            data[gopts.data.term] = $(element).val();
            if (opts.filterFields) {
              data = $.extend(false, data, _filterFields(viewModel, opts.filterFields));
            }
            if (opts.filterParams) {
              data = $.extend(false, data, _filterParams(opts.filterParams));
            }
            return $.ajax({
              url: gopts.baseUrl + opts.url,
              data: data,
              dataType: "json",
              success: function(data) {
                var m;

                m = data.map(function(d) {
                  return {
                    data: d,
                    label: $.isFunction(gopts.fields.label) ? gopts.fields.label(d) : d[gopts.fields.label],
                    value: $.isFunction(gopts.fields.value) ? gopts.fields.value(d) : d[gopts.fields.value],
                    key: $.isFunction(gopts.fields.key) ? gopts.fields.key(d) : d[gopts.fields.key]
                  };
                });
                return response(m);
              },
              minLength: 2
            });
          },
          select: function(event, ui) {
            valueAccessor()(ui.item.value);
            return _updateAutocompleteFields(viewModel, opts.fields, ui.item, opts.resetRelatedFieldsOnNull);
          },
          change: function(event, ui) {
            var observable;

            observable = valueAccessor();
            observable((opts.allowNotInList || ui.item ? $(element).val() : null));
            $(element).val(observable());
            return _updateAutocompleteFields(viewModel, opts.fields, ui.item, opts.resetRelatedFieldsOnNull);
          }
        });
      },
      update: function(element, valueAccessor, allBindingsAccessor) {
        var opts, value;

        opts = allBindingsAccessor().autocompleteOpts;
        value = ko.utils.unwrapObservable(valueAccessor());
        if ($(element).val() !== value) {
          return $(element).val(value);
        }
      }
    };
    return gOpts;
  });

}).call(this);

/*
//@ sourceMappingURL=autocomplete.map
*/
