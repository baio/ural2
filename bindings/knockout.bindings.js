// Generated by CoffeeScript 1.6.2
(function() {
  define(function() {
    ko.bindingHandlers.validationCss = {
      init: function(element, valueAccessor) {
        var f, observable, _setClass;

        observable = valueAccessor();
        f = false;
        _setClass = function(val) {
          if (!val) {
            return $(element).addClass("error");
          } else {
            return $(element).removeClass("error");
          }
        };
        observable.isModified.subscribe(function() {
          f = true;
          return _setClass(observable.isValid());
        });
        observable.isValid.subscribe(function(val) {
          if (f) {
            return _setClass(val);
          }
        });
        return ko.utils.domNodeDisposal.addDisposeCallback(element, function() {
          return $(element).removeClass("error");
        });
      }
    };
    ko.bindingHandlers.validation = {
      init: function(element, valueAccessor, allBindingsAccessor) {
        var all, prop, v, validation, _i, _len, _results;

        all = allBindingsAccessor();
        prop = all.value ? all.value : all.autocomplete ? all.autocomplete : all.datetime ? all.datetime : void 0;
        if (prop) {
          validation = valueAccessor();
          if (!Array.isArray(validation)) {
            validation = [validation];
          }
          _results = [];
          for (_i = 0, _len = validation.length; _i < _len; _i++) {
            v = validation[_i];
            _results.push(prop.extend(v));
          }
          return _results;
        }
      }
    };
    return ko.bindingHandlers.val = {
      init: function(element, valueAccessor, allBindingsAccessor) {
        var interceptor, underlyingObservable, valOpts,
          _this = this;

        underlyingObservable = valueAccessor();
        valOpts = allBindingsAccessor().valOpts;
        $(element).inputmask('decimal', {
          radixPoint: ',',
          autoUnmask: true,
          clearMaskOnLostFocus: true
        });
        interceptor = ko.computed({
          read: function() {
            var val;

            val = ko.isObservable(underlyingObservable) ? underlyingObservable() : underlyingObservable;
            if (val) {
              val = val.toString();
              return val.replace(".", ",");
            }
          },
          write: function(val) {
            var fmtVal;

            fmtVal = parseFloat(val.replace(",", "."));
            return underlyingObservable(fmtVal);
          },
          deferEvaluation: true
        });
        return ko.applyBindingsToNode(element, {
          value: interceptor
        });
      }
    };
  });

}).call(this);

/*
//@ sourceMappingURL=knockout.bindings.map
*/
