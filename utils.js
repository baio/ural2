// Generated by CoffeeScript 1.6.2
(function() {
  var __hasProp = {}.hasOwnProperty;

  define(function() {
    var object2json, _getDataPropertyType, _getPropVal;

    _getDataPropertyType = function(prop) {
      var val;

      if (ko.isComputed(prop)) {
        return "data_property_computed_observable";
      }
      val = ko.utils.unwrapObservable(prop);
      if (val) {
        if (Array.isArray(val)) {
          return "data_property_array";
        } else if ($.isPlainObject(val)) {
          return "data_property_object";
        } else {
          return "data_property";
        }
      } else {
        if (ko.isObservable(prop)) {
          if (prop.destroyAll) {
            return "data_property_array";
          } else {
            return "data_property";
          }
        } else {
          return void 0;
        }
      }
    };
    _getPropVal = function(prop) {
      var i, propType, res, _i, _len;

      propType = _getDataPropertyType(prop);
      prop = ko.utils.unwrapObservable(prop);
      switch (propType) {
        case "data_property":
          return prop;
        case "data_property_array":
          res = [];
          if (prop) {
            for (_i = 0, _len = prop.length; _i < _len; _i++) {
              i = prop[_i];
              res.push(object2json(i));
            }
          }
          return res;
        case "data_property_object":
          return this._getPropVal(prop);
        default:
          return void 0;
      }
    };
    object2json = function(obj) {
      var data, prop, val;

      data = {};
      for (prop in obj) {
        if (!__hasProp.call(obj, prop)) continue;
        if (prop[0] !== '_') {
          val = _getPropVal(obj[prop]);
          if (val !== void 0) {
            data[prop] = val;
          }
        }
      }
      return data;
    };
    return {
      object2json: object2json
    };
  });

}).call(this);

/*
//@ sourceMappingURL=utils.map
*/
